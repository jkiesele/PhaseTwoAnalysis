// -*- C++ -*-
//
// Package:    PhaseTwoAnalysis/NTupler
// Class:      MiniFromReco
// 
/**\class MiniFromReco MiniFromReco.cc PhaseTwoAnalysis/NTupler/plugins/MiniFromReco.cc

Description: produces flat ntuples from RECO collections
   - storing gen, reco, and pf leptons with pT > 10 GeV and |eta| < 3
   - storing gen and reco jets with pT > 20 GeV and |eta| < 5

Implementation:
   - muon isolation comes from https://twiki.cern.ch/twiki/bin/viewauth/CMS/Phase2MuonBarrelRecipes#Muon_isolatio0n
   - muon ID comes from https://twiki.cern.ch/twiki/bin/viewauth/CMS/Phase2MuonBarrelRecipes#Muon_identification
   - electron isolation needs to be refined
   - electron ID comes from https://indico.cern.ch/event/623893/contributions/2531742/attachments/1436144/2208665/UPSG_EGM_Workshop_Mar29.pdf
   - no jet ID is stored
   - b-tagging is not available 


*/
//
// Original Author:  Elvire Bouvier
//         Created:  Tue, 20 Jun 2017 11:27:06 GMT
//
//


// system include files
#include <memory>
#include <cmath>

// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/one/EDAnalyzer.h"
#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"//
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "DataFormats/Math/interface/deltaR.h"

#include "DataFormats/MuonReco/interface/Muon.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectron.h"
#include "EgammaAnalysis/ElectronTools/interface/ElectronEffectiveArea.h"
#include "RecoEgamma/EgammaTools/interface/ConversionTools.h"
#include "DataFormats/Common/interface/ValueMap.h"
#include "DataFormats/ParticleFlowCandidate/interface/PFCandidate.h"
#include "DataFormats/JetReco/interface/PFJet.h"
#include "DataFormats/METReco/interface/PFMET.h"
#include "DataFormats/HepMCCandidate/interface/GenParticle.h"
#include "DataFormats/Candidate/interface/CompositeCandidate.h"
#include "DataFormats/Candidate/interface/Candidate.h"
#include "DataFormats/JetReco/interface/GenJet.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "Geometry/Records/interface/MuonGeometryRecord.h"
#include "Geometry/GEMGeometry/interface/ME0EtaPartitionSpecs.h"
#include "Geometry/GEMGeometry/interface/ME0Geometry.h"

#include "FWCore/Framework/interface/ESHandle.h"

#include "DataFormats/MuonReco/interface/MuonSelectors.h"
#include "DataFormats/Common/interface/Ptr.h"

#include "PhaseTwoAnalysis/NTupler/interface/MiniEvent.h"

#include "TFile.h"
#include "TH1.h"
#include "TH2.h"
#include "TTree.h"
#include "TLorentzVector.h"
#include "Math/GenVector/VectorUtil.h"
#include "TMVA/Reader.h" 
#include "TMVA/MethodBDT.h" 

//
// class declaration
//

// If the analyzer does not use TFileService, please remove
// the template argument to the base class so the class inherits
// from  edm::one::EDAnalyzer<> and also remove the line from
// constructor "usesResource("TFileService");"
// This will improve performance in multithreaded jobs.

class MiniFromReco : public edm::one::EDAnalyzer<edm::one::SharedResources, edm::one::WatchRuns>  {
  public:
    explicit MiniFromReco(const edm::ParameterSet&);
    ~MiniFromReco();

    static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

    enum ElectronMatchType {UNMATCHED = 0,
      TRUE_PROMPT_ELECTRON,
      TRUE_ELECTRON_FROM_TAU,
      TRUE_NON_PROMPT_ELECTRON};  

  private:
    virtual void beginJob() override;
    virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
    void genAnalysis(const edm::Event& iEvent, const edm::EventSetup& iSetup);
    void recoAnalysis(const edm::Event& iEvent, const edm::EventSetup& iSetup);
    virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
    virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
    virtual void endJob() override;

    bool isME0MuonSel(reco::Muon, double pullXCut, double dXCut, double pullYCut, double dYCut, double dPhi);
    bool isME0MuonSelNew(reco::Muon, double, double, double);    
    bool isLooseElec(const reco::GsfElectron & recoEl, edm::Handle<reco::ConversionCollection> conversions, const reco::BeamSpot beamspot, double MVAVal);
    bool isMediumElec(const reco::GsfElectron & recoEl, edm::Handle<reco::ConversionCollection> conversions, const reco::BeamSpot beamspot, double MVAVal);
    bool isTightElec(const reco::GsfElectron & recoEl, edm::Handle<reco::ConversionCollection> conversions, const reco::BeamSpot beamspot, double MVAVal);
    int matchToTruth(const reco::GsfElectron & recoEl, const edm::Handle<std::vector<reco::GenParticle>> & genParticles);
    void findFirstNonElectronMother(const reco::Candidate *particle, int &ancestorPID, int &ancestorStatus);

    // ----------member data ---------------------------
    edm::Service<TFileService> fs_;

    edm::EDGetTokenT<std::vector<reco::GsfElectron>> elecsToken_;
    edm::EDGetTokenT<reco::BeamSpot> bsToken_;
    edm::EDGetTokenT<std::vector<reco::Conversion>> convToken_;
    edm::EDGetTokenT<std::vector<reco::Muon>> muonsToken_;
    edm::EDGetTokenT<edm::ValueMap<float> > PUPPINoLeptonsIsolation_charged_hadrons_;
    edm::EDGetTokenT<edm::ValueMap<float> > PUPPINoLeptonsIsolation_neutral_hadrons_;
    edm::EDGetTokenT<edm::ValueMap<float> > PUPPINoLeptonsIsolation_photons_;
    edm::EDGetTokenT<std::vector<reco::PFCandidate>> pfCandsNoLepToken_;
    edm::EDGetTokenT<std::vector<reco::PFJet>> jetsToken_;
    edm::EDGetTokenT<std::vector<reco::PFMET>> metToken_;
    edm::EDGetTokenT<std::vector<reco::GenParticle>> genPartsToken_;
    edm::EDGetTokenT<std::vector<reco::GenJet>> genJetsToken_;
    edm::EDGetTokenT<std::vector<reco::Vertex>> verticesToken_;
    edm::EDGetTokenT<reco::PhotonCollection> barrelPhotonToken_;
    edm::EDGetTokenT<edm::ValueMap<float>> barrelPhotonIDToken_;
    edm::EDGetTokenT<reco::PhotonCollection> endcapPhotonToken_;
    edm::EDGetTokenT<edm::ValueMap<float>> endcapPhotonIDToken_;
    const ME0Geometry* ME0Geometry_; 

    TTree *t_event_, *t_genParts_, *t_vertices_, *t_genJets_, *t_genPhotons_, *t_looseElecs_, *t_tightElecs_, *t_looseMuons_, *t_tightMuons_, *t_loosePhotons_, *t_tightPhotons_, *t_puppiJets_, *t_puppiMET_;
    MiniEvent_t ev_;

};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
MiniFromReco::MiniFromReco(const edm::ParameterSet& iConfig): 
  elecsToken_(consumes<std::vector<reco::GsfElectron>>(iConfig.getParameter<edm::InputTag>("electrons"))),
  bsToken_(consumes<reco::BeamSpot>(iConfig.getParameter<edm::InputTag>("beamspot"))),
  convToken_(consumes<std::vector<reco::Conversion>>(iConfig.getParameter<edm::InputTag>("conversions"))),
  muonsToken_(consumes<std::vector<reco::Muon>>(iConfig.getParameter<edm::InputTag>("muons"))),
  pfCandsNoLepToken_(consumes<std::vector<reco::PFCandidate>>(iConfig.getParameter<edm::InputTag>("pfCandsNoLep"))),
  jetsToken_(consumes<std::vector<reco::PFJet>>(iConfig.getParameter<edm::InputTag>("jets"))),
  metToken_(consumes<std::vector<reco::PFMET>>(iConfig.getParameter<edm::InputTag>("met"))),
  genPartsToken_(consumes<std::vector<reco::GenParticle>>(iConfig.getParameter<edm::InputTag>("genParts"))),
  genJetsToken_(consumes<std::vector<reco::GenJet>>(iConfig.getParameter<edm::InputTag>("genJets"))),
  verticesToken_(consumes<std::vector<reco::Vertex>>(iConfig.getParameter<edm::InputTag>("vertices"))),
  barrelPhotonToken_(consumes<reco::PhotonCollection>(iConfig.getParameter<edm::InputTag>("photonsBarrel"))),
  barrelPhotonIDToken_(consumes<edm::ValueMap<float>>(iConfig.getParameter<edm::InputTag>("phoBarrelMva"))),
  endcapPhotonToken_(consumes<reco::PhotonCollection>(iConfig.getParameter<edm::InputTag>("photonsEndcap"))),
  endcapPhotonIDToken_(consumes<edm::ValueMap<float>>(iConfig.getParameter<edm::InputTag>("phoEndcapMva")))
{
  //now do what ever initialization is needed
  PUPPINoLeptonsIsolation_charged_hadrons_ = consumes<edm::ValueMap<float> >(iConfig.getParameter<edm::InputTag>("puppiNoLepIsolationChargedHadrons"));
  PUPPINoLeptonsIsolation_neutral_hadrons_ = consumes<edm::ValueMap<float> >(iConfig.getParameter<edm::InputTag>("puppiNoLepIsolationNeutralHadrons"));
  PUPPINoLeptonsIsolation_photons_ = consumes<edm::ValueMap<float> >(iConfig.getParameter<edm::InputTag>("puppiNoLepIsolationPhotons"));

  usesResource("TFileService");

  t_event_        = fs_->make<TTree>("Event","Event");
  t_genParts_     = fs_->make<TTree>("Particle","Particle");
  t_genPhotons_   = fs_->make<TTree>("GenPhoton","GenPhoton");
  t_vertices_     = fs_->make<TTree>("Vertex","Vertex");
  t_genJets_      = fs_->make<TTree>("GenJet","GenJet");
  t_looseElecs_   = fs_->make<TTree>("ElectronLoose","ElectronLoose");
  t_tightElecs_   = fs_->make<TTree>("ElectronTight","ElectronTight");
  t_looseMuons_   = fs_->make<TTree>("MuonLoose","MuonLoose");
  t_tightMuons_   = fs_->make<TTree>("MuonTight","MuonTight");
  t_puppiJets_    = fs_->make<TTree>("JetPUPPI","JetPUPPI");
  t_puppiMET_     = fs_->make<TTree>("PuppiMissingET","PuppiMissingET");
  t_loosePhotons_ = fs_->make<TTree>("PhotonLoose","PhotonLoose");
  t_tightPhotons_ = fs_->make<TTree>("PhotonTight","PhotonTight");
  createMiniEventTree(t_event_, t_genParts_, t_vertices_, t_genJets_, t_genPhotons_, t_looseElecs_, t_tightElecs_, t_looseMuons_, t_tightMuons_, t_puppiJets_, t_puppiMET_, t_loosePhotons_, t_tightPhotons_, ev_);
}


MiniFromReco::~MiniFromReco()
{

  // do anything here that needs to be done at desctruction time
  // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method to fill gen level event -------------
  void
MiniFromReco::genAnalysis(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  using namespace edm;

  Handle<std::vector<reco::GenParticle>> genParts;
  iEvent.getByToken(genPartsToken_, genParts);

  Handle<std::vector<reco::GenJet>> genJets;
  iEvent.getByToken(genJetsToken_, genJets);

  // Jets
  std::vector<size_t> jGenJets;
  ev_.ngj = 0;
  for (size_t i = 0; i < genJets->size(); i++) {
    if (genJets->at(i).pt() < 25.) continue;
    if (fabs(genJets->at(i).eta()) > 5) continue;

    bool overlaps = false;
    for (size_t j = 0; j < genParts->size(); j++) {
      if (abs(genParts->at(j).pdgId()) != 11 && abs(genParts->at(j).pdgId()) != 13) continue;
      if (ROOT::Math::VectorUtil::DeltaR(genParts->at(j).p4(),genJets->at(i).p4()) < 0.01) {
        overlaps = true;
        break;
      }
    }
    if (overlaps) continue;
    jGenJets.push_back(i);

    ev_.gj_pt[ev_.ngj]   = genJets->at(i).pt();
    ev_.gj_phi[ev_.ngj]  = genJets->at(i).phi();
    ev_.gj_eta[ev_.ngj]  = genJets->at(i).eta();
    ev_.gj_mass[ev_.ngj] = genJets->at(i).mass();
    ev_.ngj++;
  }

  // Leptons
  ev_.ngl = 0;
  for (size_t i = 0; i < genParts->size(); i++) {
    if (abs(genParts->at(i).pdgId()) != 11 && abs(genParts->at(i).pdgId()) != 13) continue;
    if (genParts->at(i).pt() < 20.) continue;
    if (fabs(genParts->at(i).eta()) > 3.) continue;
    double genIso = 0.;
    for (size_t j = 0; j < jGenJets.size(); j++) {
      if (ROOT::Math::VectorUtil::DeltaR(genParts->at(i).p4(),genJets->at(jGenJets[j]).p4()) > 0.7) continue; 
      std::vector<const reco::Candidate *> jconst = genJets->at(jGenJets[j]).getJetConstituentsQuick();
      for (size_t k = 0; k < jconst.size(); k++) {
        double deltaR = ROOT::Math::VectorUtil::DeltaR(genParts->at(i).p4(),jconst[k]->p4());
        if (deltaR < 0.01) continue;
        if (abs(genParts->at(i).pdgId()) == 13 && deltaR > 0.4) continue;
        if (abs(genParts->at(i).pdgId()) == 11 && deltaR > 0.3) continue;
        genIso = genIso + jconst[k]->pt();
      }
    }
    genIso = genIso / genParts->at(i).pt();
    ev_.gl_pid[ev_.ngl]    = genParts->at(i).pdgId();
    ev_.gl_ch[ev_.ngl]     = genParts->at(i).charge();
    ev_.gl_st[ev_.ngl]     = genParts->at(i).status();
    ev_.gl_p[ev_.ngl]      = genParts->at(i).p();
    ev_.gl_px[ev_.ngl]     = genParts->at(i).px();
    ev_.gl_py[ev_.ngl]     = genParts->at(i).py();
    ev_.gl_pz[ev_.ngl]     = genParts->at(i).pz();
    ev_.gl_nrj[ev_.ngl]    = genParts->at(i).energy();
    ev_.gl_pt[ev_.ngl]     = genParts->at(i).pt();
    ev_.gl_phi[ev_.ngl]    = genParts->at(i).phi();
    ev_.gl_eta[ev_.ngl]    = genParts->at(i).eta();
    ev_.gl_mass[ev_.ngl]   = genParts->at(i).mass();
    ev_.gl_relIso[ev_.ngl] = genIso; 
    ev_.ngl++;
  }

}

// ------------ method to fill reco level pat -------------
  void
MiniFromReco::recoAnalysis(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  using namespace edm;

  Handle<std::vector<reco::GsfElectron>> elecs;
  iEvent.getByToken(elecsToken_, elecs);
  Handle<reco::ConversionCollection> conversions;
  iEvent.getByToken(convToken_, conversions);
  Handle<reco::BeamSpot> bsHandle;
  iEvent.getByToken(bsToken_, bsHandle);

  Handle<std::vector<reco::Muon>> muons;
  iEvent.getByToken(muonsToken_, muons);
  edm::Handle<edm::ValueMap<float>> PUPPINoLeptonsIsolation_charged_hadrons;
  edm::Handle<edm::ValueMap<float>> PUPPINoLeptonsIsolation_neutral_hadrons;
  edm::Handle<edm::ValueMap<float>> PUPPINoLeptonsIsolation_photons;
  iEvent.getByToken(PUPPINoLeptonsIsolation_charged_hadrons_, PUPPINoLeptonsIsolation_charged_hadrons);
  iEvent.getByToken(PUPPINoLeptonsIsolation_neutral_hadrons_, PUPPINoLeptonsIsolation_neutral_hadrons);
  iEvent.getByToken(PUPPINoLeptonsIsolation_photons_, PUPPINoLeptonsIsolation_photons);  

  Handle<std::vector<reco::PFCandidate>> pfCandsNoLep;
  iEvent.getByToken(pfCandsNoLepToken_, pfCandsNoLep);

  Handle<std::vector<reco::PFJet>> jets;
  iEvent.getByToken(jetsToken_, jets);

  Handle<std::vector<reco::PFMET>> met;
  iEvent.getByToken(metToken_, met);

  Handle<std::vector<reco::GenParticle>> genParts;
  iEvent.getByToken(genPartsToken_, genParts);

  Handle<std::vector<reco::GenJet>> genJets;
  iEvent.getByToken(genJetsToken_, genJets);

  Handle<std::vector<reco::Vertex>> vertices;
  iEvent.getByToken(verticesToken_, vertices);

  Handle<reco::PhotonCollection> barrelPhotonHandle;
  iEvent.getByToken(barrelPhotonToken_, barrelPhotonHandle);

  Handle<ValueMap<float>> barrelPhotonIDHandle;
  iEvent.getByToken(barrelPhotonIDToken_, barrelPhotonIDHandle);

  Handle<reco::PhotonCollection> endcapPhotonHandle;
  iEvent.getByToken(endcapPhotonToken_, endcapPhotonHandle);

  Handle<ValueMap<float>> endcapPhotonIDHandle;
  iEvent.getByToken(endcapPhotonIDToken_, endcapPhotonIDHandle);

  int prVtx = -1;
  ev_.nvtx = 0;
  for(size_t i = 0; i < vertices->size(); i++) {
    if (vertices->at(i).isFake()) continue;
    if (vertices->at(i).ndof() <= 4.) continue;
    if (prVtx < 0) prVtx = i;
    ev_.v_pt2[ev_.nvtx] = vertices->at(i).p4().pt();
    ev_.nvtx++;
  }
  if (prVtx < 0.) return;

  // Muons

  ev_.nlm = 0;
  ev_.ntm = 0;

  for(size_t i = 0; i < muons->size(); i++){
    if (muons->at(i).pt() < 2.) continue;
    if (fabs(muons->at(i).eta()) > 2.8) continue;

    Ptr<const reco::Muon> muref(muons,i);
    double muon_puppiIsoNoLep_ChargedHadron = (*PUPPINoLeptonsIsolation_charged_hadrons)[muref];
    double muon_puppiIsoNoLep_NeutralHadron = (*PUPPINoLeptonsIsolation_neutral_hadrons)[muref];
    double muon_puppiIsoNoLep_Photon = (*PUPPINoLeptonsIsolation_photons)[muref];
    double isoMu = (muon_puppiIsoNoLep_ChargedHadron+muon_puppiIsoNoLep_NeutralHadron+muon_puppiIsoNoLep_Photon)/muons->at(i).pt();

    // Loose ID
    double dPhiCut = std::min(std::max(1.2/muons->at(i).p(),1.2/100),0.056);
    double dPhiBendCut = std::min(std::max(0.2/muons->at(i).p(),0.2/100),0.0096);    
    bool isLoose = (fabs(muons->at(i).eta()) < 2.4 && muon::isLooseMuon(muons->at(i))) || (fabs(muons->at(i).eta()) > 2.4 && isME0MuonSelNew(muons->at(i), 0.077, dPhiCut, dPhiBendCut));

    // Medium ID -- needs to be updated
    bool ipxy = false, ipz = false, validPxlHit = false, highPurity = false;
    if (muons->at(i).innerTrack().isNonnull()){
    	ipxy = std::abs(muons->at(i).muonBestTrack()->dxy(vertices->at(prVtx).position())) < 0.2;
    	ipz = std::abs(muons->at(i).muonBestTrack()->dz(vertices->at(prVtx).position())) < 0.5;
    	validPxlHit = muons->at(i).innerTrack()->hitPattern().numberOfValidPixelHits() > 0;
    	highPurity = muons->at(i).innerTrack()->quality(reco::Track::highPurity);
    }    
    // bool isMedium = (fabs(muons->at(i).eta()) < 2.4 && muon::isMediumMuon(muons->at(i))) || (fabs(muons->at(i).eta()) > 2.4 && isME0MuonSelNew(muons->at(i), 0.077, dPhiCut, dPhiBendCut) && ipxy && ipz && validPxlHit && highPurity);

    // Tight ID
    dPhiCut = std::min(std::max(1.2/muons->at(i).p(),1.2/100),0.032);
    dPhiBendCut = std::min(std::max(0.2/muons->at(i).p(),0.2/100),0.0041);
    bool isTight = (fabs(muons->at(i).eta()) < 2.4 && vertices->size() > 0 && muon::isTightMuon(muons->at(i),vertices->at(prVtx))) || (fabs(muons->at(i).eta()) > 2.4 && isME0MuonSelNew(muons->at(i), 0.048, dPhiCut, dPhiBendCut) && ipxy && ipz && validPxlHit && highPurity);

    if (!isLoose) continue;

    ev_.lm_ch[ev_.nlm]     = muons->at(i).charge();
    ev_.lm_pt[ev_.nlm]     = muons->at(i).pt();
    ev_.lm_phi[ev_.nlm]    = muons->at(i).phi();
    ev_.lm_eta[ev_.nlm]    = muons->at(i).eta();
    ev_.lm_mass[ev_.nlm]   = muons->at(i).mass();
    ev_.lm_relIso[ev_.nlm] = isoMu;
    ev_.lm_g[ev_.nlm] = -1;
    for (int ig = 0; ig < ev_.ngl; ig++) {
      if (abs(ev_.gl_pid[ig]) != 13) continue;
      if (reco::deltaR(ev_.gl_eta[ig],ev_.gl_phi[ig],ev_.lm_eta[ev_.nlm],ev_.lm_phi[ev_.nlm]) > 0.4) continue;
      ev_.lm_g[ev_.nlm]    = ig;
    }
    ev_.nlm++;

    if (!isTight) continue;

    ev_.tm_ch[ev_.ntm]     = muons->at(i).charge();
    ev_.tm_pt[ev_.ntm]     = muons->at(i).pt();
    ev_.tm_phi[ev_.ntm]    = muons->at(i).phi();
    ev_.tm_eta[ev_.ntm]    = muons->at(i).eta();
    ev_.tm_mass[ev_.ntm]   = muons->at(i).mass();
    ev_.tm_relIso[ev_.ntm] = isoMu;
    ev_.tm_g[ev_.ntm] = -1;
    for (int ig = 0; ig < ev_.ngl; ig++) {
      if (abs(ev_.gl_pid[ig]) != 13) continue;
      if (reco::deltaR(ev_.gl_eta[ig],ev_.gl_phi[ig],ev_.tm_eta[ev_.ntm],ev_.tm_phi[ev_.ntm]) > 0.4) continue;
      ev_.tm_g[ev_.ntm]    = ig;
    }
    ev_.ntm++;

  }

  // Electrons

  ev_.nle = 0;
  ev_.nte = 0;

  for(size_t i = 0; i < elecs->size(); i++) { 
    if (elecs->at(i).pt() < 10.) continue;
    if (fabs(elecs->at(i).eta()) > 3.) continue;

    double isoEl = 0.;
    for (size_t k = 0; k < pfCandsNoLep->size(); k++) {
      if (ROOT::Math::VectorUtil::DeltaR(elecs->at(i).p4(),pfCandsNoLep->at(k).p4()) > 0.4) continue;
      isoEl += pfCandsNoLep->at(k).pt();
    }
    if (elecs->at(i).pt() > 0.) isoEl = isoEl / elecs->at(i).pt(); 
    else isoEl = -1.;

    Ptr<const reco::GsfElectron> el4iso(elecs,i);

//    if (!isLoose) continue;

    ev_.le_ch[ev_.nle]     = elecs->at(i).charge();
    ev_.le_pt[ev_.nle]     = elecs->at(i).pt();
    ev_.le_phi[ev_.nle]    = elecs->at(i).phi();
    ev_.le_eta[ev_.nle]    = elecs->at(i).eta();
    ev_.le_mass[ev_.nle]   = elecs->at(i).mass();
    ev_.le_relIso[ev_.nle] = isoEl;
    ev_.le_g[ev_.nle] = -1;
    for (int ig = 0; ig < ev_.ngl; ig++) {
      if (abs(ev_.gl_pid[ig]) != 11) continue;
      if (reco::deltaR(ev_.gl_eta[ig],ev_.gl_phi[ig],ev_.le_eta[ev_.nle],ev_.le_phi[ev_.nle]) > 0.4) continue;
      ev_.le_g[ev_.nle]    = ig;
    }
    ev_.nle++;

//    if (!isTight) continue;

    ev_.te_ch[ev_.nte]     = elecs->at(i).charge();
    ev_.te_pt[ev_.nte]     = elecs->at(i).pt();
    ev_.te_phi[ev_.nte]    = elecs->at(i).phi();
    ev_.te_eta[ev_.nte]    = elecs->at(i).eta();
    ev_.te_mass[ev_.nte]   = elecs->at(i).mass();
    ev_.te_relIso[ev_.nte] = isoEl;
    ev_.te_g[ev_.nte] = -1;
    for (int ig = 0; ig < ev_.ngl; ig++) {
      if (abs(ev_.gl_pid[ig]) != 11) continue;
      if (reco::deltaR(ev_.gl_eta[ig],ev_.gl_phi[ig],ev_.te_eta[ev_.nte],ev_.te_phi[ev_.nte]) > 0.4) continue;
      ev_.te_g[ev_.nte]    = ig;
    }
    ev_.nte++;

  }

  // Jets
  ev_.nj = 0;
  for(size_t i = 0; i < jets->size(); i++){
    if (jets->at(i).pt() < 20.) continue;
    if (fabs(jets->at(i).eta()) > 5) continue;

    bool overlaps = false;
    for (size_t j = 0; j < elecs->size(); j++) {
      if (ROOT::Math::VectorUtil::DeltaR(elecs->at(j).p4(),jets->at(i).p4()) < 0.01) {
        overlaps = true;
        break;
      }
    }
    if (overlaps) continue;
    for (size_t j = 0; j < muons->size(); j++) {
      if (ROOT::Math::VectorUtil::DeltaR(muons->at(j).p4(),jets->at(i).p4()) < 0.01) {
        overlaps = true;
        break;
      }
    }
    if (overlaps) continue;

    ev_.j_id[ev_.nj]      = -1;
    ev_.j_pt[ev_.nj]      = jets->at(i).pt();
    ev_.j_phi[ev_.nj]     = jets->at(i).phi();
    ev_.j_eta[ev_.nj]     = jets->at(i).eta();
    ev_.j_mass[ev_.nj]    = jets->at(i).mass();
    ev_.j_mvav2[ev_.nj]   = -1; 
    ev_.j_deepcsv[ev_.nj] = -1;
    ev_.j_flav[ev_.nj]    = -1;
    ev_.j_hadflav[ev_.nj] = -1;
    ev_.j_pid[ev_.nj]     = -1;
    ev_.j_g[ev_.nj] = -1;
    for (int ig = 0; ig < ev_.ngj; ig++) {
      if (reco::deltaR(ev_.gj_eta[ig],ev_.gj_phi[ig],ev_.j_eta[ev_.nj],ev_.j_phi[ev_.nj]) > 0.4) continue;
      ev_.j_g[ev_.nj]     = ig;
      break;
    }	
    ev_.nj++;

  }

  // MET 
  ev_.nmet = 0;
  if (met->size() > 0) {
    ev_.met_pt[ev_.nmet]  = met->at(0).pt();
    ev_.met_eta[ev_.nmet] = met->at(0).eta();
    ev_.met_phi[ev_.nmet] = met->at(0).phi();
    ev_.nmet++;
  }
  
  // Photons

  ev_.nlp = 0;
  ev_.ntp = 0;

  for (size_t i = 0; i < barrelPhotonHandle->size() + endcapPhotonHandle->size(); i++) {
    const auto& photon = ( i < barrelPhotonHandle->size() ) ? barrelPhotonHandle->at(i) : endcapPhotonHandle->at(i-barrelPhotonHandle->size());

    if (photon.pt() < 10.) continue;
    if (fabs(photon.eta()) > 3.) continue;

    const float mvaValue = ( i < barrelPhotonHandle->size() ) ? barrelPhotonIDHandle->get(barrelPhotonHandle.id(), i) : endcapPhotonIDHandle->get(endcapPhotonHandle.id(), i-barrelPhotonHandle->size());
    bool isEB = photon.isEB();
     
    bool isLoose = 0;
    bool isTight = 0;

    if( isEB )
      {
	 isLoose = (mvaValue > 0.00);
	 isTight = (mvaValue > 0.56);
      }     
     else
      {
	 isLoose = (mvaValue > 0.20);
	 isTight = (mvaValue > 0.68);
      }          

    if (!isLoose) continue;

    ev_.lp_pt[ev_.nlp]     = photon.pt();
    ev_.lp_phi[ev_.nlp]    = photon.phi();
    ev_.lp_eta[ev_.nlp]    = photon.eta();
    ev_.lp_nrj[ev_.nlp]    = photon.energy();
    ev_.lp_g[ev_.nlp] = -1;
    for (int ig = 0; ig < ev_.ngp; ig++) {
      if (reco::deltaR(ev_.gp_eta[ig],ev_.gp_phi[ig],ev_.lp_eta[ev_.nlp],ev_.lp_phi[ev_.nlp]) > 0.4) continue;
      ev_.lp_g[ev_.nlp]    = ig;
    }
    ev_.nlp++;

    if (!isTight) continue;

    ev_.tp_pt[ev_.ntp]     = photon.pt();
    ev_.tp_phi[ev_.ntp]    = photon.phi();
    ev_.tp_eta[ev_.ntp]    = photon.eta();
    ev_.tp_nrj[ev_.ntp]    = photon.energy();
    ev_.tp_g[ev_.ntp] = -1;
    for (int ig = 0; ig < ev_.ngp; ig++) {
      if (reco::deltaR(ev_.gp_eta[ig],ev_.gp_phi[ig],ev_.tp_eta[ev_.ntp],ev_.tp_phi[ev_.ntp]) > 0.4) continue;
      ev_.tp_g[ev_.ntp]    = ig;
    }
    ev_.ntp++;
  }

}

// ------------ method called for each event  ------------
  void
MiniFromReco::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{

  //analyze the event
  if(!iEvent.isRealData()) genAnalysis(iEvent, iSetup);
  recoAnalysis(iEvent, iSetup);
  
  //save event if at least one lepton at gen or reco level
  ev_.run     = iEvent.id().run();
  ev_.lumi    = iEvent.luminosityBlock();
  ev_.event   = iEvent.id().event(); 
  t_event_->Fill();
  t_genParts_->Fill();
  t_genPhotons_->Fill();
  t_vertices_->Fill();
  t_genJets_->Fill();
  t_looseElecs_->Fill();
  t_tightElecs_->Fill();
  t_looseMuons_->Fill();
  t_tightMuons_->Fill();
  t_puppiJets_->Fill();
  t_puppiMET_->Fill();
  t_loosePhotons_->Fill();
  t_tightPhotons_->Fill();

}

// ------------ method to improve ME0 muon ID ----------------
  bool 
MiniFromReco::isME0MuonSel(reco::Muon muon, double pullXCut, double dXCut, double pullYCut, double dYCut, double dPhi)
{

  bool result = false;
  bool isME0 = muon.isME0Muon();

  if(isME0){

    double deltaX = 999;
    double deltaY = 999;
    double pullX = 999;
    double pullY = 999;
    double deltaPhi = 999;

    bool X_MatchFound = false, Y_MatchFound = false, Dir_MatchFound = false;

    const std::vector<reco::MuonChamberMatch>& chambers = muon.matches();
    for(std::vector<reco::MuonChamberMatch>::const_iterator chamber = chambers.begin(); chamber != chambers.end(); ++chamber){

      for (std::vector<reco::MuonSegmentMatch>::const_iterator segment = chamber->me0Matches.begin(); segment != chamber->me0Matches.end(); ++segment){

        if (chamber->detector() == 5){

          deltaX   = std::abs(chamber->x - segment->x);
          deltaY   = std::abs(chamber->y - segment->y);
          pullX    = std::abs(chamber->x - segment->x) / std::sqrt(chamber->xErr + segment->xErr);
          pullY    = std::abs(chamber->y - segment->y) / std::sqrt(chamber->yErr + segment->yErr);
          deltaPhi = std::abs(atan(chamber->dXdZ) - atan(segment->dXdZ));

        }
      }
    }

    if ((pullX < pullXCut) || (deltaX < dXCut)) X_MatchFound = true;
    if ((pullY < pullYCut) || (deltaY < dYCut)) Y_MatchFound = true;
    if (deltaPhi < dPhi) Dir_MatchFound = true;

    result = X_MatchFound && Y_MatchFound && Dir_MatchFound;

  }

  return result;

}

bool 
MiniFromReco::isME0MuonSelNew(reco::Muon muon, double dEtaCut, double dPhiCut, double dPhiBendCut)
{

  bool result = false;
  bool isME0 = muon.isME0Muon();

  if(isME0){

    double deltaEta = 999;
    double deltaPhi = 999;
    double deltaPhiBend = 999;

    const std::vector<reco::MuonChamberMatch>& chambers = muon.matches();
    for( std::vector<reco::MuonChamberMatch>::const_iterator chamber = chambers.begin(); chamber != chambers.end(); ++chamber ){

      if (chamber->detector() == 5){

        for ( std::vector<reco::MuonSegmentMatch>::const_iterator segment = chamber->me0Matches.begin(); segment != chamber->me0Matches.end(); ++segment ){

          LocalPoint trk_loc_coord(chamber->x, chamber->y, 0);
          LocalPoint seg_loc_coord(segment->x, segment->y, 0);
          LocalVector trk_loc_vec(chamber->dXdZ, chamber->dYdZ, 1);
          LocalVector seg_loc_vec(segment->dXdZ, segment->dYdZ, 1);

          const ME0Chamber * me0chamber = ME0Geometry_->chamber(chamber->id);

          GlobalPoint trk_glb_coord = me0chamber->toGlobal(trk_loc_coord);
          GlobalPoint seg_glb_coord = me0chamber->toGlobal(seg_loc_coord);

          //double segDPhi = segment->me0SegmentRef->deltaPhi();
          // need to check if this works
          double segDPhi = me0chamber->computeDeltaPhi(seg_loc_coord, seg_loc_vec);
          double trackDPhi = me0chamber->computeDeltaPhi(trk_loc_coord, trk_loc_vec);

          deltaEta = std::abs(trk_glb_coord.eta() - seg_glb_coord.eta() );
          deltaPhi = std::abs(trk_glb_coord.phi() - seg_glb_coord.phi() );
          deltaPhiBend = std::abs(segDPhi - trackDPhi);

          if (deltaEta < dEtaCut && deltaPhi < dPhiCut && deltaPhiBend < dPhiBendCut) result = true;

        }
      }
    }

  }

  return result;

}

// ------------ loose elec ID -----------
bool 
MiniFromReco::isLooseElec(const reco::GsfElectron & recoEl, edm::Handle<reco::ConversionCollection> conversions, const reco::BeamSpot beamspot, double MVAVal) {
  bool isLoose = false;
  double Ooemoop = 999.;
  if (recoEl.ecalEnergy()==0) Ooemoop = 999.;
  else if (!std::isfinite(recoEl.ecalEnergy())) Ooemoop = 998.;
  else Ooemoop = fabs(1.0/recoEl.ecalEnergy() - recoEl.eSuperClusterOverP()/recoEl.ecalEnergy());
  if (fabs(recoEl.superCluster()->eta()) < 1.479
      && recoEl.full5x5_sigmaIetaIeta() < 0.02992
      && fabs(recoEl.deltaEtaSuperClusterTrackAtVtx()) < 0.004119
      && fabs(recoEl.deltaPhiSuperClusterTrackAtVtx()) < 0.05176
      && recoEl.hcalOverEcal() < 6.741
      && Ooemoop < 73.76
      && recoEl.pfIsolationVariables().sumChargedHadronPt / recoEl.pt() < 2.5
      && !ConversionTools::hasMatchedConversion(recoEl, conversions, beamspot.position())) 
    isLoose = true;

  return (fabs(recoEl.superCluster()->eta()) < 1.556 ? isLoose : (MVAVal > -0.01)); 
}

// ------------ medium elec ID -----------
bool 
MiniFromReco::isMediumElec(const reco::GsfElectron & recoEl, edm::Handle<reco::ConversionCollection> conversions, const reco::BeamSpot beamspot, double MVAVal) {
  bool isMedium = false;
  double Ooemoop = 999.;
  if (recoEl.ecalEnergy()==0) Ooemoop = 999.;
  else if (!std::isfinite(recoEl.ecalEnergy())) Ooemoop = 998.;
  else Ooemoop = fabs(1.0/recoEl.ecalEnergy() - recoEl.eSuperClusterOverP()/recoEl.ecalEnergy());
  if (fabs(recoEl.superCluster()->eta()) < 1.479
      && recoEl.full5x5_sigmaIetaIeta() < 0.01609
      && fabs(recoEl.deltaEtaSuperClusterTrackAtVtx()) < 0.001766
      && fabs(recoEl.deltaPhiSuperClusterTrackAtVtx()) < 0.03130
      && recoEl.hcalOverEcal() < 7.371
      && Ooemoop < 22.6
      && recoEl.pfIsolationVariables().sumChargedHadronPt / recoEl.pt() < 1.325
      && !ConversionTools::hasMatchedConversion(recoEl, conversions, beamspot.position())) 
    isMedium = true;

  return (fabs(recoEl.superCluster()->eta()) < 1.556 ? isMedium : (MVAVal > 0.03));  
}

// ------------ tight elec ID -----------
bool 
MiniFromReco::isTightElec(const reco::GsfElectron & recoEl, edm::Handle<reco::ConversionCollection> conversions, const reco::BeamSpot beamspot, double MVAVal) {
  bool isTight = false;
  double Ooemoop = 999.;
  if (recoEl.ecalEnergy()==0) Ooemoop = 999.;
  else if (!std::isfinite(recoEl.ecalEnergy())) Ooemoop = 998.;
  else Ooemoop = fabs(1.0/recoEl.ecalEnergy() - recoEl.eSuperClusterOverP()/recoEl.ecalEnergy());
  if (fabs(recoEl.superCluster()->eta()) < 1.479
      && recoEl.full5x5_sigmaIetaIeta() < 0.01614
      && fabs(recoEl.deltaEtaSuperClusterTrackAtVtx()) < 0.001322
      && fabs(recoEl.deltaPhiSuperClusterTrackAtVtx()) < 0.06129
      && recoEl.hcalOverEcal() < 4.492
      && Ooemoop < 18.26
      && recoEl.pfIsolationVariables().sumChargedHadronPt / recoEl.pt() < 1.255
      && !ConversionTools::hasMatchedConversion(recoEl, conversions, beamspot.position())) 
    isTight = true;

  return (fabs(recoEl.superCluster()->eta()) < 1.556 ? isTight : (MVAVal > 0.1)); 
}

// ------------ match reco elec to gen elec ------------
int 
MiniFromReco::matchToTruth(const reco::GsfElectron & recoEl, const edm::Handle<std::vector<reco::GenParticle>> & genParticles) {
  // 
  // Explicit loop and geometric matching method (advised by Josh Bendavid)
  //

  // Find the closest status 1 gen electron to the reco electron
  double dR = 999;
  const reco::Candidate *closestElectron = 0;
  for(size_t i=0; i<genParticles->size();i++){
    const reco::Candidate *particle = &(*genParticles)[i];
    // Drop everything that is not electron or not status 1
    if(abs(particle->pdgId()) != 11 || particle->status() != 1)
      continue;
    //
    double dRtmp = ROOT::Math::VectorUtil::DeltaR( recoEl.p4(), particle->p4() );
    if(dRtmp < dR){
      dR = dRtmp;
      closestElectron = particle;
    }
  }
  // See if the closest electron (if it exists) is close enough.
  // If not, no match found.
  if(!(closestElectron != 0 && dR < 0.1)) {
    return UNMATCHED;
  }

  // 
  int ancestorPID = -999; 
  int ancestorStatus = -999;
  findFirstNonElectronMother(closestElectron, ancestorPID, ancestorStatus);

  if(ancestorPID == -999 && ancestorStatus == -999){
    // No non-electron parent??? This should never happen.
    // Complain.
    printf("SimpleElectronNtupler: ERROR! Electron does not apper to have a non-electron parent\n");
    return UNMATCHED;
  }

  if(abs(ancestorPID) > 50 && ancestorStatus == 2)
    return TRUE_NON_PROMPT_ELECTRON;

  if(abs(ancestorPID) == 15 && ancestorStatus == 2)
    return TRUE_ELECTRON_FROM_TAU;

  // What remains is true prompt electrons
  return TRUE_PROMPT_ELECTRON;
}
void 
MiniFromReco::findFirstNonElectronMother(const reco::Candidate *particle,
    int &ancestorPID, int &ancestorStatus) {

  if(particle == 0){
    printf("SimpleElectronNtupler: ERROR! null candidate pointer, this should never happen\n");
    return;
  }

  // Is this the first non-electron parent? If yes, return, otherwise
  // go deeper into recursion
  if(abs(particle->pdgId()) == 11){
    findFirstNonElectronMother(particle->mother(0), ancestorPID, ancestorStatus);
  }else{
    ancestorPID = particle->pdgId();
    ancestorStatus = particle->status();
  }

  return;
}

// ------------ method called once each job just before starting event loop  ------------
  void 
MiniFromReco::beginJob()
{
}

// ------------ method called once each run ----------------
  void
MiniFromReco::beginRun(edm::Run const& iRun, edm::EventSetup const& iSetup)
{
  edm::ESHandle<ME0Geometry> hGeom;
  iSetup.get<MuonGeometryRecord>().get(hGeom);
  ME0Geometry_ =( &*hGeom);
}

// ------------ method called when ending the processing of a run  ------------
  void
MiniFromReco::endRun(edm::Run const&, edm::EventSetup const&)
{
}

// ------------ method called once each job just after ending the event loop  ------------
  void 
MiniFromReco::endJob() 
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
MiniFromReco::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(MiniFromReco);
